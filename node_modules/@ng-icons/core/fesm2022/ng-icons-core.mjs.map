{"version":3,"file":"ng-icons-core.mjs","sources":["../../../../packages/core/src/lib/providers/glyph-config.provider.ts","../../../../packages/core/src/lib/providers/glyph.provider.ts","../../../../packages/core/src/lib/utils/coercion.ts","../../../../packages/core/src/lib/components/glyph/glyph.component.ts","../../../../packages/core/src/lib/providers/icon-config.provider.ts","../../../../packages/core/src/lib/providers/icon-loader.provider.ts","../../../../packages/core/src/lib/providers/icon.provider.ts","../../../../packages/core/src/lib/utils/async.ts","../../../../packages/core/src/lib/utils/format.ts","../../../../packages/core/src/lib/providers/features/features.ts","../../../../packages/core/src/lib/components/icon/icon.component.ts","../../../../packages/core/src/lib/icon.module.ts","../../../../packages/core/src/lib/providers/features/csp.ts","../../../../packages/core/src/ng-icons-core.ts"],"sourcesContent":["import { InjectionToken, Provider, inject } from '@angular/core';\n\nexport interface NgGlyphConfig {\n  /** Define the default size of glyph */\n  size: string | number;\n  /** Define the optical size of the glyph */\n  opticalSize?: number;\n  /** Define the default color of glyph */\n  color?: string;\n  /** Define the default weight of glyph */\n  weight?: number;\n  /** Define the default grade of glyph */\n  grade?: number;\n  /** Define the default fill of glyph */\n  fill?: boolean;\n}\n\nexport const NgGlyphConfigToken = new InjectionToken<Required<NgGlyphConfig>>(\n  'Ng Glyph Config',\n);\n\nconst defaultConfig: NgGlyphConfig = {\n  size: '1em',\n  opticalSize: 20,\n  weight: 400,\n  grade: 0,\n  fill: false,\n};\n\n/**\n * Provide the configuration for the glyph\n * @param config The configuration to use\n */\nexport function provideNgGlyphsConfig(\n  config: Partial<NgGlyphConfig>,\n): Provider {\n  return {\n    provide: NgGlyphConfigToken,\n    useValue: { ...defaultConfig, ...config },\n  };\n}\n\n/**\n * Inject the configuration for the glyphs\n * @returns The configuration to use\n * @internal\n */\nexport function injectNgGlyphsConfig(): Required<NgGlyphConfig> {\n  return (inject(NgGlyphConfigToken, { optional: true }) ??\n    defaultConfig) as Required<NgGlyphConfig>;\n}\n","import {\n  EnvironmentProviders,\n  InjectionToken,\n  inject,\n  makeEnvironmentProviders,\n} from '@angular/core';\n\nexport const NgGlyphsToken = new InjectionToken<NgGlyphs>('NgGlyphsToken');\n\nexport function provideNgGlyphs(\n  ...glyphsets: NgGlyphset[]\n): EnvironmentProviders {\n  // if there are no glyphsets, throw an error\n  if (!glyphsets.length) {\n    throw new Error('Please provide at least one glyphset.');\n  }\n\n  // the default glyphset is the first one\n  const defaultGlyphset = glyphsets[0].name;\n\n  return makeEnvironmentProviders([\n    { provide: NgGlyphsToken, useValue: { defaultGlyphset, glyphsets } },\n  ]);\n}\n\nexport function injectNgGlyphs(): NgGlyphs {\n  const glyphs = inject(NgGlyphsToken, { optional: true });\n\n  if (!glyphs) {\n    throw new Error(\n      'Please provide the glyphs using the provideNgGlyphs() function.',\n    );\n  }\n\n  return glyphs;\n}\n\nexport interface NgGlyphset {\n  name: string;\n  baseClass: string;\n}\n\nexport interface NgGlyphs {\n  defaultGlyphset: string;\n  glyphsets: NgGlyphset[];\n}\n","export function coerceCssPixelValue(value: string): string {\n  return value == null ? '' : /^\\d+$/.test(value) ? `${value}px` : value;\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  booleanAttribute,\n  numberAttribute,\n} from '@angular/core';\nimport { injectNgGlyphsConfig } from '../../providers/glyph-config.provider';\nimport { injectNgGlyphs } from '../../providers/glyph.provider';\nimport { coerceCssPixelValue } from '../../utils/coercion';\n\n@Component({\n  selector: 'ng-glyph',\n  standalone: true,\n  template: ``,\n  styleUrl: './glyph.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgGlyph {\n  /**\n   * Access the available glyphsets\n   */\n  private readonly glyphsets = injectNgGlyphs();\n\n  /**\n   * Access the default configuration\n   */\n  private readonly config = injectNgGlyphsConfig();\n\n  /**\n   * Define the name of the glyph to display\n   */\n  @HostBinding('textContent')\n  @Input({ required: true })\n  name!: string;\n\n  /**\n   * Define the glyphset to use\n   */\n  @Input()\n  glyphset: string = this.glyphsets.defaultGlyphset;\n\n  /**\n   * Define the optical size of the glyph\n   */\n  @Input({ transform: numberAttribute }) opticalSize: number =\n    this.config.opticalSize;\n\n  /**\n   * Define the weight of the glyph\n   */\n  @Input({ transform: numberAttribute }) weight: number = this.config.weight;\n\n  /**\n   * Define the grade of the glyph\n   */\n  @Input({ transform: numberAttribute }) grade: number = this.config.grade;\n\n  /**\n   * Define the fill of the glyph\n   */\n  @Input({ transform: booleanAttribute }) fill: boolean = this.config.fill;\n\n  /**\n   * Define the size of the glyph\n   */\n  @HostBinding('style.--ng-glyph__size')\n  @Input({ transform: coerceCssPixelValue })\n  size?: string | number = this.config.size;\n\n  /**\n   * Define the color of the glyph\n   */\n  @HostBinding('style.color')\n  @Input()\n  color?: string = this.config.color;\n\n  /**\n   * Derive the glyphset class from the glyphset name\n   */\n  @HostBinding('class')\n  get glyphsetClass(): string {\n    const glyphset = this.glyphsets.glyphsets.find(\n      glyphset => glyphset.name === this.glyphset,\n    );\n\n    if (!glyphset) {\n      throw new Error(\n        `The glyphset \"${this.glyphset}\" does not exist. Please provide a valid glyphset.`,\n      );\n    }\n\n    return glyphset.baseClass;\n  }\n\n  /**\n   * Define the font variation settings of the glyph\n   */\n  @HostBinding('style.font-variation-settings')\n  get fontVariationSettings(): string {\n    return `'FILL' ${this.fill ? 1 : 0}, 'wght' ${this.weight}, 'GRAD' ${\n      this.grade\n    }, 'opsz' ${this.opticalSize}`;\n  }\n}\n","import { InjectionToken, Provider, inject } from '@angular/core';\nimport { NgIconFeatures } from './features/features';\n\nexport interface NgIconConfig {\n  /** Define the default size of icons */\n  size: string;\n  /** Define the default color of icons */\n  color?: string;\n}\n\nexport const NgIconConfigToken = new InjectionToken<NgIconConfig>(\n  'Ng Icon Config',\n);\n\nconst defaultConfig: NgIconConfig = {\n  size: '1em',\n};\n\n/**\n * Provide the configuration for the icons\n * @param config The configuration to use\n */\nexport function provideNgIconsConfig(\n  config: Partial<NgIconConfig>,\n  ...features: NgIconFeatures[]\n): Provider[] {\n  return [\n    {\n      provide: NgIconConfigToken,\n      useValue: { ...defaultConfig, ...config },\n    },\n    features.map(feature => feature.Éµproviders),\n  ];\n}\n\n/**\n * Inject the configuration for the icons\n * @returns The configuration to use\n * @internal\n */\nexport function injectNgIconConfig(): NgIconConfig {\n  return inject(NgIconConfigToken, { optional: true }) ?? defaultConfig;\n}\n","import { inject, InjectionToken, Provider } from '@angular/core';\nimport type { Observable } from 'rxjs';\n\nexport type NgIconLoader = (\n  name: string,\n) => Promise<string> | Observable<string> | string;\n\nexport const NgIconLoaderToken = new InjectionToken<NgIconLoader>(\n  'Ng Icon Loader Token',\n);\n\n/**\n * The list of features as an enum to uniquely type each feature.\n */\nconst enum NgIconLoaderFeatureKind {\n  CachingFeature,\n}\n\ninterface NgIconLoaderFeature<FeatureKind extends NgIconLoaderFeatureKind> {\n  kind: FeatureKind;\n  providers: Provider[];\n}\n\n/**\n * Helper function to create an object that represents a Loader feature.\n */\nfunction loaderFeature<FeatureKind extends NgIconLoaderFeatureKind>(\n  kind: FeatureKind,\n  providers: Provider[],\n): NgIconLoaderFeature<FeatureKind> {\n  return { kind: kind, providers: providers };\n}\n\ntype CachingFeature =\n  NgIconLoaderFeature<NgIconLoaderFeatureKind.CachingFeature>;\n\ntype NgIconLoaderFeatures = CachingFeature;\n\nexport type NgIconLoaderCache = Map<string, string | Promise<string>>;\n\nexport const NgIconCacheToken = new InjectionToken<NgIconLoaderCache>(\n  'Ng Icon Cache Token',\n);\n\n/**\n * Add caching to the loader. This will prevent the loader from being called multiple times for the same icon name.\n */\nexport function withCaching(): CachingFeature {\n  return loaderFeature(NgIconLoaderFeatureKind.CachingFeature, [\n    { provide: NgIconCacheToken, useValue: new Map<string, string>() },\n  ]);\n}\n\n/**\n * Provide a function that will return the SVG content for a given icon name.\n * @param loader The function that will return the SVG content for a given icon name.\n * @param features The list of features to apply to the loader.\n * @returns The SVG content for a given icon name.\n */\nexport function provideNgIconLoader(\n  loader: NgIconLoader,\n  ...features: NgIconLoaderFeatures[]\n) {\n  return [\n    { provide: NgIconLoaderToken, useValue: loader },\n    features.map(feature => feature.providers),\n  ];\n}\n\n/**\n * Inject the function that will return the SVG content for a given icon name.\n */\nexport function injectNgIconLoader(): NgIconLoader | null {\n  return inject(NgIconLoaderToken, { optional: true });\n}\n\n/**\n * Inject the cache that will store the SVG content for a given icon name.\n */\nexport function injectNgIconLoaderCache(): NgIconLoaderCache | null {\n  return inject(NgIconCacheToken, { optional: true });\n}\n","import {\n  InjectionToken,\n  Optional,\n  Provider,\n  SkipSelf,\n  inject,\n} from '@angular/core';\n\n/**\n * Define the icons to use\n * @param icons The icons to provide\n */\nexport function provideIcons(icons: Record<string, string>): Provider[] {\n  return [\n    {\n      provide: NgIconsToken,\n      useFactory: (parentIcons?: Record<string, string>[]) => ({\n        ...parentIcons?.reduce((acc, icons) => ({ ...acc, ...icons }), {}),\n        ...icons,\n      }),\n      deps: [[NgIconsToken, new Optional(), new SkipSelf()]],\n      multi: true,\n    },\n  ];\n}\n\nexport const NgIconsToken = new InjectionToken<Record<string, string>[]>(\n  'Icons Token',\n);\n\n/**\n * Inject the icons to use\n * @returns The icons to use\n * @internal\n */\nexport function injectNgIcons(): Record<string, string>[] {\n  return inject(NgIconsToken, { optional: true }) ?? [];\n}\n","import { Observable, firstValueFrom, isObservable } from 'rxjs';\n\n/**\n * A loader may return a promise, an observable or a string. This function will coerce the result into a promise.\n * @returns\n */\nexport function coerceLoaderResult(\n  result: Promise<string> | Observable<string> | string,\n): Promise<string> {\n  if (typeof result === 'string') {\n    return Promise.resolve(result);\n  }\n\n  if (isObservable(result)) {\n    return firstValueFrom(result);\n  }\n\n  return result;\n}\n","/**\n * Hyphenated to lowerCamelCase\n */\nexport function toPropertyName(str: string): string {\n  return str\n    .replace(/([^a-zA-Z0-9])+(.)?/g, (_, __, chr) =>\n      chr ? chr.toUpperCase() : '',\n    )\n    .replace(/[^a-zA-Z\\d]/g, '')\n    .replace(/^([A-Z])/, m => m.toLowerCase());\n}\n","import { InjectionToken, Provider, inject } from '@angular/core';\n\nexport type ContentSecurityPolicyFeature =\n  NgIconFeature<NgIconFeatureKind.ContentSecurityPolicyFeature>;\n\nexport type NgIconFeatures = ContentSecurityPolicyFeature;\n\n/**\n * The list of features as an enum to uniquely type each feature.\n */\nexport const enum NgIconFeatureKind {\n  ContentSecurityPolicyFeature,\n}\n\n/**\n * Helper type to represent a feature.\n */\nexport interface NgIconFeature<FeatureKind extends NgIconFeatureKind> {\n  Éµkind: FeatureKind;\n  Éµproviders: Provider[];\n}\n\n/**\n * Helper function to create an object that represents a feature.\n */\nexport function createFeature<FeatureKind extends NgIconFeatureKind>(\n  kind: FeatureKind,\n  providers: Provider[],\n): NgIconFeature<FeatureKind> {\n  return { Éµkind: kind, Éµproviders: providers };\n}\n\nexport type NgIconPreProcessor = (icon: string) => string;\nexport type NgIconPostProcessor = (element: HTMLElement) => void;\n\nexport const NgIconPreProcessorToken = new InjectionToken<NgIconPreProcessor>(\n  'Ng Icon Pre Processor',\n);\n\nexport const NgIconPostProcessorToken = new InjectionToken<NgIconPostProcessor>(\n  'Ng Icon Post Processor',\n);\n\nexport function injectNgIconPreProcessor(): NgIconPreProcessor {\n  return inject(NgIconPreProcessorToken, { optional: true }) ?? (icon => icon);\n}\n\nexport function injectNgIconPostProcessor(): NgIconPostProcessor {\n  return inject(NgIconPostProcessorToken, { optional: true }) ?? (() => {});\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  inject,\n  Injector,\n  Input,\n  OnChanges,\n  OnInit,\n  runInInjectionContext,\n  SimpleChanges,\n} from '@angular/core';\nimport type { IconName } from '../../components/icon/icon-name';\nimport { injectNgIconConfig } from '../../providers/icon-config.provider';\nimport {\n  injectNgIconLoader,\n  injectNgIconLoaderCache,\n} from '../../providers/icon-loader.provider';\nimport { injectNgIcons } from '../../providers/icon.provider';\nimport { coerceLoaderResult } from '../../utils/async';\nimport { coerceCssPixelValue } from '../../utils/coercion';\nimport { toPropertyName } from '../../utils/format';\nimport {\n  injectNgIconPostProcessor,\n  injectNgIconPreProcessor,\n} from '../../providers/features/features';\n\n// This is a typescript type to prevent inference from collapsing the union type to a string to improve type safety\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type IconType = IconName | (string & {});\n\n@Component({\n  selector: 'ng-icon',\n  template: '',\n  standalone: true,\n  styleUrls: ['./icon.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgIcon implements OnInit, OnChanges {\n  /** Access the global icon config */\n  private readonly config = injectNgIconConfig();\n\n  /** Access the icons */\n  private readonly icons = injectNgIcons();\n\n  /** Access the icon loader if defined */\n  private readonly loader = injectNgIconLoader();\n\n  /** Access the icon cache if defined */\n  private readonly cache = injectNgIconLoaderCache();\n\n  /** Access the pre-processor */\n  private readonly preProcessor = injectNgIconPreProcessor();\n\n  /** Access the post-processor */\n  private readonly postProcessor = injectNgIconPostProcessor();\n\n  /** Access the injector */\n  private readonly injector = inject(Injector);\n\n  /** Access the element ref */\n  private readonly elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  /** Define the name of the icon to display */\n  @Input() set name(name: IconType) {\n    this.setIcon(name);\n  }\n\n  /** Define the svg of the icon to display */\n  @Input() set svg(svg: string) {\n    this.setSvg(svg);\n  }\n\n  /** Define the size of the icon */\n  @Input({ transform: coerceCssPixelValue })\n  size?: string | number = this.config.size;\n\n  /** Define the stroke-width of the icon */\n  @Input()\n  strokeWidth?: string | number;\n\n  /** Define the color of the icon */\n  @Input()\n  color?: string = this.config.color;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.size) {\n      this.setIconSize();\n    }\n    if (changes.color) {\n      this.setIconColor();\n    }\n    if (changes.strokeWidth) {\n      this.setIconStrokeWidth();\n    }\n  }\n\n  ngOnInit(): void {\n    this.setIconStyles();\n  }\n\n  private setIconColor(): void {\n    this.elementRef.nativeElement.style.removeProperty('color');\n\n    if (this.color !== undefined) {\n      this.elementRef.nativeElement.style.setProperty('color', this.color);\n    }\n  }\n\n  private setIconSize(): void {\n    this.elementRef.nativeElement.style.removeProperty('--ng-icon__size');\n\n    if (this.size !== undefined) {\n      this.elementRef.nativeElement.style.setProperty(\n        '--ng-icon__size',\n        this.size.toString(),\n      );\n    }\n  }\n\n  private setIconStrokeWidth(): void {\n    this.elementRef.nativeElement.style.removeProperty(\n      '--ng-icon__stroke-width',\n    );\n    if (this.strokeWidth !== undefined) {\n      this.elementRef.nativeElement.style.setProperty(\n        '--ng-icon__stroke-width',\n        this.strokeWidth.toString(),\n      );\n    }\n  }\n\n  /**\n   * Set the styles for the icon. We use the style property to set the styles\n   * rather than the host binding as it works with CSP.\n   */\n  private setIconStyles(): void {\n    this.setIconColor();\n    this.setIconSize();\n    this.setIconStrokeWidth();\n  }\n\n  private setSvg(svg: string): void {\n    this.elementRef.nativeElement.innerHTML = this.preProcessor(svg);\n    this.postProcessor(this.elementRef.nativeElement);\n  }\n\n  /**\n   * Load the icon with the given name and insert it into the template.\n   * @param name The name of the icon to load.\n   */\n  private async setIcon(name: IconType): Promise<void> {\n    const propertyName = toPropertyName(name);\n\n    for (const icons of [...this.icons].reverse()) {\n      if (icons[propertyName]) {\n        // insert the SVG into the template\n        this.setSvg(icons[propertyName]);\n        return;\n      }\n    }\n\n    // if there is a loader defined, use it to load the icon\n    if (this.loader) {\n      const result = await this.requestIconFromLoader(name);\n\n      // if the result is a string, insert the SVG into the template\n      if (result !== null) {\n        this.setSvg(result);\n        return;\n      }\n    }\n\n    // if there is no icon with this name warn the user as they probably forgot to import it\n    console.warn(\n      `No icon named ${name} was found. You may need to import it using the withIcons function.`,\n    );\n  }\n\n  /**\n   * Request the icon from the loader.\n   * @param name The name of the icon to load.\n   * @returns The SVG content for a given icon name.\n   */\n  private requestIconFromLoader(name: string): Promise<string> {\n    return new Promise(resolve => {\n      runInInjectionContext(this.injector, async () => {\n        // if we have a cache, check if the icon is already loaded (i.e, it is a string)\n        if (this.cache) {\n          const cachedResult = this.cache.get(name);\n\n          if (typeof cachedResult === 'string') {\n            resolve(cachedResult);\n            return;\n          }\n\n          // it may be a promise, so we need to await it\n          if (cachedResult instanceof Promise) {\n            const result = await cachedResult;\n            resolve(result);\n            return;\n          }\n        }\n\n        const promise = coerceLoaderResult(this.loader!(name));\n\n        // store the promise in the cache so if we get repeated calls (e.g. in a loop) before the loader has resolved\n        // then don't call the loader function multiple times\n        this.cache?.set(name, promise);\n\n        // await the result of the promise\n        const result = await promise;\n\n        // if we have a cache, store the result\n        this.cache?.set(name, result);\n\n        resolve(result);\n      });\n    });\n  }\n}\n","import { Inject, ModuleWithProviders, NgModule } from '@angular/core';\nimport { NgIcon } from './components/icon/icon.component';\nimport { NgIconsToken, provideIcons } from './providers/icon.provider';\n\n@NgModule({\n  imports: [NgIcon],\n  exports: [NgIcon],\n})\nexport class NgIconsModule {\n  constructor(@Inject(NgIconsToken) icons: Record<string, string>) {\n    if (Object.keys(icons).length === 0) {\n      throw new Error(\n        'No icons have been provided. Ensure to include some icons by importing them using NgIconsModule.withIcons({ ... }).',\n      );\n    }\n  }\n\n  /**\n   * Define the icons that will be included in the application. This allows unused icons to\n   * be tree-shaken away to reduce bundle size\n   * @param icons The object containing the required icons\n   */\n  static withIcons(\n    icons: Record<string, string>,\n  ): ModuleWithProviders<NgIconsModule> {\n    return { ngModule: NgIconsModule, providers: provideIcons(icons) };\n  }\n}\n\nexport const NG_ICON_DIRECTIVES = [NgIcon] as const;\n","import {\n  ContentSecurityPolicyFeature,\n  NgIconFeatureKind,\n  NgIconPostProcessorToken,\n  NgIconPreProcessorToken,\n  createFeature,\n} from './features';\n\nfunction preprocessIcon(icon: string): string {\n  // rename all style attributes to data-style to avoid being blocked by the CSP\n  return icon.replace(/style\\s*=/g, 'data-style=');\n}\n\nfunction postprocessIcon(element: HTMLElement): void {\n  // find all elements with a data-style attribute and get the styles from it\n  // and apply them to the element using the style property and remove the data-style attribute\n  const elements = element.querySelectorAll<HTMLElement>('[data-style]');\n\n  for (const element of Array.from(elements)) {\n    const styles = element.getAttribute('data-style');\n\n    styles?.split(';').forEach(style => {\n      const [property, value] = style.split(':');\n      element.style[property.trim() as any] = value.trim();\n    });\n\n    element.removeAttribute('data-style');\n  }\n}\n\n/**\n * Process icons in a way that is compliant with the content security policy\n */\nexport function withContentSecurityPolicy(): ContentSecurityPolicyFeature {\n  return createFeature(NgIconFeatureKind.ContentSecurityPolicyFeature, [\n    { provide: NgIconPreProcessorToken, useValue: preprocessIcon },\n    { provide: NgIconPostProcessorToken, useValue: postprocessIcon },\n  ]);\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["defaultConfig"],"mappings":"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"}