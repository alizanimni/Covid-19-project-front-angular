import { inject, InjectionToken } from '@angular/core';
export const NgIconLoaderToken = new InjectionToken('Ng Icon Loader Token');
/**
 * Helper function to create an object that represents a Loader feature.
 */
function loaderFeature(kind, providers) {
    return { kind: kind, providers: providers };
}
export const NgIconCacheToken = new InjectionToken('Ng Icon Cache Token');
/**
 * Add caching to the loader. This will prevent the loader from being called multiple times for the same icon name.
 */
export function withCaching() {
    return loaderFeature(0 /* NgIconLoaderFeatureKind.CachingFeature */, [
        { provide: NgIconCacheToken, useValue: new Map() },
    ]);
}
/**
 * Provide a function that will return the SVG content for a given icon name.
 * @param loader The function that will return the SVG content for a given icon name.
 * @param features The list of features to apply to the loader.
 * @returns The SVG content for a given icon name.
 */
export function provideNgIconLoader(loader, ...features) {
    return [
        { provide: NgIconLoaderToken, useValue: loader },
        features.map(feature => feature.providers),
    ];
}
/**
 * Inject the function that will return the SVG content for a given icon name.
 */
export function injectNgIconLoader() {
    return inject(NgIconLoaderToken, { optional: true });
}
/**
 * Inject the cache that will store the SVG content for a given icon name.
 */
export function injectNgIconLoaderCache() {
    return inject(NgIconCacheToken, { optional: true });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1sb2FkZXIucHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvcHJvdmlkZXJzL2ljb24tbG9hZGVyLnByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBT2pFLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLElBQUksY0FBYyxDQUNqRCxzQkFBc0IsQ0FDdkIsQ0FBQztBQWNGOztHQUVHO0FBQ0gsU0FBUyxhQUFhLENBQ3BCLElBQWlCLEVBQ2pCLFNBQXFCO0lBRXJCLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsQ0FBQztBQUM5QyxDQUFDO0FBU0QsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxjQUFjLENBQ2hELHFCQUFxQixDQUN0QixDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLFVBQVUsV0FBVztJQUN6QixPQUFPLGFBQWEsaURBQXlDO1FBQzNELEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxJQUFJLEdBQUcsRUFBa0IsRUFBRTtLQUNuRSxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsbUJBQW1CLENBQ2pDLE1BQW9CLEVBQ3BCLEdBQUcsUUFBZ0M7SUFFbkMsT0FBTztRQUNMLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7UUFDaEQsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7S0FDM0MsQ0FBQztBQUNKLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxrQkFBa0I7SUFDaEMsT0FBTyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsdUJBQXVCO0lBQ3JDLE9BQU8sTUFBTSxDQUFDLGdCQUFnQixFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDdEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCwgSW5qZWN0aW9uVG9rZW4sIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgdHlwZSB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IHR5cGUgTmdJY29uTG9hZGVyID0gKFxuICBuYW1lOiBzdHJpbmcsXG4pID0+IFByb21pc2U8c3RyaW5nPiB8IE9ic2VydmFibGU8c3RyaW5nPiB8IHN0cmluZztcblxuZXhwb3J0IGNvbnN0IE5nSWNvbkxvYWRlclRva2VuID0gbmV3IEluamVjdGlvblRva2VuPE5nSWNvbkxvYWRlcj4oXG4gICdOZyBJY29uIExvYWRlciBUb2tlbicsXG4pO1xuXG4vKipcbiAqIFRoZSBsaXN0IG9mIGZlYXR1cmVzIGFzIGFuIGVudW0gdG8gdW5pcXVlbHkgdHlwZSBlYWNoIGZlYXR1cmUuXG4gKi9cbmNvbnN0IGVudW0gTmdJY29uTG9hZGVyRmVhdHVyZUtpbmQge1xuICBDYWNoaW5nRmVhdHVyZSxcbn1cblxuaW50ZXJmYWNlIE5nSWNvbkxvYWRlckZlYXR1cmU8RmVhdHVyZUtpbmQgZXh0ZW5kcyBOZ0ljb25Mb2FkZXJGZWF0dXJlS2luZD4ge1xuICBraW5kOiBGZWF0dXJlS2luZDtcbiAgcHJvdmlkZXJzOiBQcm92aWRlcltdO1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgYW4gb2JqZWN0IHRoYXQgcmVwcmVzZW50cyBhIExvYWRlciBmZWF0dXJlLlxuICovXG5mdW5jdGlvbiBsb2FkZXJGZWF0dXJlPEZlYXR1cmVLaW5kIGV4dGVuZHMgTmdJY29uTG9hZGVyRmVhdHVyZUtpbmQ+KFxuICBraW5kOiBGZWF0dXJlS2luZCxcbiAgcHJvdmlkZXJzOiBQcm92aWRlcltdLFxuKTogTmdJY29uTG9hZGVyRmVhdHVyZTxGZWF0dXJlS2luZD4ge1xuICByZXR1cm4geyBraW5kOiBraW5kLCBwcm92aWRlcnM6IHByb3ZpZGVycyB9O1xufVxuXG50eXBlIENhY2hpbmdGZWF0dXJlID1cbiAgTmdJY29uTG9hZGVyRmVhdHVyZTxOZ0ljb25Mb2FkZXJGZWF0dXJlS2luZC5DYWNoaW5nRmVhdHVyZT47XG5cbnR5cGUgTmdJY29uTG9hZGVyRmVhdHVyZXMgPSBDYWNoaW5nRmVhdHVyZTtcblxuZXhwb3J0IHR5cGUgTmdJY29uTG9hZGVyQ2FjaGUgPSBNYXA8c3RyaW5nLCBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz4+O1xuXG5leHBvcnQgY29uc3QgTmdJY29uQ2FjaGVUb2tlbiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxOZ0ljb25Mb2FkZXJDYWNoZT4oXG4gICdOZyBJY29uIENhY2hlIFRva2VuJyxcbik7XG5cbi8qKlxuICogQWRkIGNhY2hpbmcgdG8gdGhlIGxvYWRlci4gVGhpcyB3aWxsIHByZXZlbnQgdGhlIGxvYWRlciBmcm9tIGJlaW5nIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyBmb3IgdGhlIHNhbWUgaWNvbiBuYW1lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aENhY2hpbmcoKTogQ2FjaGluZ0ZlYXR1cmUge1xuICByZXR1cm4gbG9hZGVyRmVhdHVyZShOZ0ljb25Mb2FkZXJGZWF0dXJlS2luZC5DYWNoaW5nRmVhdHVyZSwgW1xuICAgIHsgcHJvdmlkZTogTmdJY29uQ2FjaGVUb2tlbiwgdXNlVmFsdWU6IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCkgfSxcbiAgXSk7XG59XG5cbi8qKlxuICogUHJvdmlkZSBhIGZ1bmN0aW9uIHRoYXQgd2lsbCByZXR1cm4gdGhlIFNWRyBjb250ZW50IGZvciBhIGdpdmVuIGljb24gbmFtZS5cbiAqIEBwYXJhbSBsb2FkZXIgVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCByZXR1cm4gdGhlIFNWRyBjb250ZW50IGZvciBhIGdpdmVuIGljb24gbmFtZS5cbiAqIEBwYXJhbSBmZWF0dXJlcyBUaGUgbGlzdCBvZiBmZWF0dXJlcyB0byBhcHBseSB0byB0aGUgbG9hZGVyLlxuICogQHJldHVybnMgVGhlIFNWRyBjb250ZW50IGZvciBhIGdpdmVuIGljb24gbmFtZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVOZ0ljb25Mb2FkZXIoXG4gIGxvYWRlcjogTmdJY29uTG9hZGVyLFxuICAuLi5mZWF0dXJlczogTmdJY29uTG9hZGVyRmVhdHVyZXNbXVxuKSB7XG4gIHJldHVybiBbXG4gICAgeyBwcm92aWRlOiBOZ0ljb25Mb2FkZXJUb2tlbiwgdXNlVmFsdWU6IGxvYWRlciB9LFxuICAgIGZlYXR1cmVzLm1hcChmZWF0dXJlID0+IGZlYXR1cmUucHJvdmlkZXJzKSxcbiAgXTtcbn1cblxuLyoqXG4gKiBJbmplY3QgdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCByZXR1cm4gdGhlIFNWRyBjb250ZW50IGZvciBhIGdpdmVuIGljb24gbmFtZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdE5nSWNvbkxvYWRlcigpOiBOZ0ljb25Mb2FkZXIgfCBudWxsIHtcbiAgcmV0dXJuIGluamVjdChOZ0ljb25Mb2FkZXJUb2tlbiwgeyBvcHRpb25hbDogdHJ1ZSB9KTtcbn1cblxuLyoqXG4gKiBJbmplY3QgdGhlIGNhY2hlIHRoYXQgd2lsbCBzdG9yZSB0aGUgU1ZHIGNvbnRlbnQgZm9yIGEgZ2l2ZW4gaWNvbiBuYW1lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0TmdJY29uTG9hZGVyQ2FjaGUoKTogTmdJY29uTG9hZGVyQ2FjaGUgfCBudWxsIHtcbiAgcmV0dXJuIGluamVjdChOZ0ljb25DYWNoZVRva2VuLCB7IG9wdGlvbmFsOiB0cnVlIH0pO1xufVxuIl19